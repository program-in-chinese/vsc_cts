{"version":3,"sources":["rules/objectLiteralSurroundingSpaceRule.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,iCAAmC;AACnC,+BAAiC;AAEjC;IAA0B,wBAAuB;IAAjD;;IASA,CAAC;IAHU,oBAAK,GAAZ,UAAa,UAAyB;QAClC,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;IACpD,CAAC;IAPa,2BAAsB,GAAG,4DAA4D,CAAC;IACtF,4BAAuB,GAAG,6DAA6D,CAAC;IACxF,kCAA6B,GAAG,gEAAgE,CAAC;IACjG,mCAA8B,GAAG,iEAAiE,CAAC;IAKrH,WAAC;CATD,AASC,CATyB,IAAI,CAAC,KAAK,CAAC,YAAY,GAShD;AATY,oBAAI;AAWjB,cAAc,GAA2B;IAC7B,IAAA,2BAAU,CAAS;IAC3B,EAAE,CAAC,YAAY,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC;IACnC,eAAe,IAAa;QACxB,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,KAAK,EAAE,CAAC,UAAU,CAAC,uBAAuB,CAAC,CAAC,CAAC;YACtD,KAAK,CAAC,IAAkC,CAAC,CAAC;QAC9C,CAAC;QACD,EAAE,CAAC,YAAY,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;IACjC,CAAC;IAED,eAAe,IAAgC;QAC3C,IAAM,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;QACtC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;YAC7B,MAAM,CAAC;QACX,CAAC;QAED,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;YACzB,GAAG,CAAC,gBAAgB,CAAC,IAAI,EAAE,IAAI,CAAC,sBAAsB,CAAC,CAAC;QAC5D,CAAC;QACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;YACzB,GAAG,CAAC,YAAY,CAAC,IAAI,CAAC,GAAG,GAAG,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,6BAA6B,CAAC,CAAC;QAC1E,CAAC;QACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;YACvC,GAAG,CAAC,gBAAgB,CAAC,IAAI,EAAE,IAAI,CAAC,uBAAuB,CAAC,CAAC;QAC7D,CAAC;QACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;YACvC,GAAG,CAAC,YAAY,CAAC,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,QAAQ,EAAE,GAAG,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,8BAA8B,CAAC,CAAC;QAC7F,CAAC;IACL,CAAC;AACL,CAAC","file":"objectLiteralSurroundingSpaceRule.js","sourcesContent":["import * as Lint from \"tslint/lib\";\r\nimport * as ts from \"typescript\";\r\n\r\nexport class Rule extends Lint.Rules.AbstractRule {\r\n    public static LEADING_FAILURE_STRING = \"No leading whitespace found on single-line object literal.\";\r\n    public static TRAILING_FAILURE_STRING = \"No trailing whitespace found on single-line object literal.\";\r\n    public static LEADING_EXCESS_FAILURE_STRING = \"Excess leading whitespace found on single-line object literal.\";\r\n    public static TRAILING_EXCESS_FAILURE_STRING = \"Excess trailing whitespace found on single-line object literal.\";\r\n\r\n    public apply(sourceFile: ts.SourceFile): Lint.RuleFailure[] {\r\n        return this.applyWithFunction(sourceFile, walk);\r\n    }\r\n}\r\n\r\nfunction walk(ctx: Lint.WalkContext<void>): void {\r\n    const { sourceFile } = ctx;\r\n    ts.forEachChild(sourceFile, recur);\r\n    function recur(node: ts.Node): void {\r\n        if (node.kind === ts.SyntaxKind.ObjectLiteralExpression) {\r\n            check(node as ts.ObjectLiteralExpression);\r\n        }\r\n        ts.forEachChild(node, recur);\r\n    }\r\n\r\n    function check(node: ts.ObjectLiteralExpression): void {\r\n        const text = node.getText(sourceFile);\r\n        if (!text.match(/^{[^\\n]+}$/g)) {\r\n            return;\r\n        }\r\n\r\n        if (text.charAt(1) !== \" \") {\r\n            ctx.addFailureAtNode(node, Rule.LEADING_FAILURE_STRING);\r\n        }\r\n        if (text.charAt(2) === \" \") {\r\n            ctx.addFailureAt(node.pos + 2, 1, Rule.LEADING_EXCESS_FAILURE_STRING);\r\n        }\r\n        if (text.charAt(text.length - 2) !== \" \") {\r\n            ctx.addFailureAtNode(node, Rule.TRAILING_FAILURE_STRING);\r\n        }\r\n        if (text.charAt(text.length - 3) === \" \") {\r\n            ctx.addFailureAt(node.pos + node.getWidth() - 3, 1, Rule.TRAILING_EXCESS_FAILURE_STRING);\r\n        }\r\n    }\r\n}\r\n"]}