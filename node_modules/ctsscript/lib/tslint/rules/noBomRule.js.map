{"version":3,"sources":["rules/noBomRule.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,iCAAmC;AAGnC;IAA0B,wBAAuB;IAAjD;;IAMA,CAAC;IAHU,oBAAK,GAAZ,UAAa,UAAyB;QAClC,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;IACpD,CAAC;IAJa,mBAAc,GAAG,sBAAsB,CAAC;IAK1D,WAAC;CAND,AAMC,CANyB,IAAI,CAAC,KAAK,CAAC,YAAY,GAMhD;AANY,oBAAI;AAQjB,cAAc,GAA2B;IACrC,EAAE,CAAC,CAAC,GAAG,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,QAAQ,CAAC,CAAC,CAAC;QACtC,GAAG,CAAC,UAAU,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,cAAc,CAAC,CAAC;IAC9C,CAAC;AACL,CAAC","file":"noBomRule.js","sourcesContent":["import * as Lint from \"tslint/lib\";\r\nimport * as ts from \"typescript\";\r\n\r\nexport class Rule extends Lint.Rules.AbstractRule {\r\n    public static FAILURE_STRING = \"This file has a BOM.\";\r\n\r\n    public apply(sourceFile: ts.SourceFile): Lint.RuleFailure[] {\r\n        return this.applyWithFunction(sourceFile, walk);\r\n    }\r\n}\r\n\r\nfunction walk(ctx: Lint.WalkContext<void>): void {\r\n    if (ctx.sourceFile.text[0] === \"\\ufeff\") {\r\n        ctx.addFailure(0, 1, Rule.FAILURE_STRING);\r\n    }\r\n}\r\n"]}