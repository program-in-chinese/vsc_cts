{"version":3,"sources":["rules/noInOperatorRule.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,iCAAmC;AACnC,+BAAiC;AAEjC;IAA0B,wBAAuB;IAAjD;;IAMA,CAAC;IAHU,oBAAK,GAAZ,UAAa,UAAyB;QAClC,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;IACpD,CAAC;IAJa,mBAAc,GAAG,kFAAkF,CAAC;IAKtH,WAAC;CAND,AAMC,CANyB,IAAI,CAAC,KAAK,CAAC,YAAY,GAMhD;AANY,oBAAI;AAQjB,cAAc,GAA2B;IACrC,EAAE,CAAC,YAAY,CAAC,GAAG,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC;IACvC,eAAe,IAAa;QACxB,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,KAAK,EAAE,CAAC,UAAU,CAAC,SAAS,IAAI,IAAI,CAAC,MAAM,CAAC,IAAI,KAAK,EAAE,CAAC,UAAU,CAAC,gBAAgB,CAAC,CAAC,CAAC;YAC/F,GAAG,CAAC,gBAAgB,CAAC,IAAI,EAAE,IAAI,CAAC,cAAc,CAAC,CAAC;QACpD,CAAC;IACL,CAAC;AACL,CAAC","file":"noInOperatorRule.js","sourcesContent":["import * as Lint from \"tslint/lib\";\r\nimport * as ts from \"typescript\";\r\n\r\nexport class Rule extends Lint.Rules.AbstractRule {\r\n    public static FAILURE_STRING = \"Don't use the 'in' keyword - use 'hasProperty' to check for key presence instead\";\r\n\r\n    public apply(sourceFile: ts.SourceFile): Lint.RuleFailure[] {\r\n        return this.applyWithFunction(sourceFile, walk);\r\n    }\r\n}\r\n\r\nfunction walk(ctx: Lint.WalkContext<void>): void {\r\n    ts.forEachChild(ctx.sourceFile, recur);\r\n    function recur(node: ts.Node): void {\r\n        if (node.kind === ts.SyntaxKind.InKeyword && node.parent.kind === ts.SyntaxKind.BinaryExpression) {\r\n            ctx.addFailureAtNode(node, Rule.FAILURE_STRING);\r\n        }\r\n    }\r\n}\r\n"]}