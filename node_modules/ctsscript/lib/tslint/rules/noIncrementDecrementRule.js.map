{"version":3,"sources":["rules/noIncrementDecrementRule.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,iCAAmC;AACnC,+BAAiC;AAEjC;IAA0B,wBAAuB;IAAjD;;IAOA,CAAC;IAHU,oBAAK,GAAZ,UAAa,UAAyB;QAClC,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;IACpD,CAAC;IALa,2BAAsB,GAAG,2EAA2E,CAAC;IACrG,0BAAqB,GAAG,0CAA0C,CAAC;IAKrF,WAAC;CAPD,AAOC,CAPyB,IAAI,CAAC,KAAK,CAAC,YAAY,GAOhD;AAPY,oBAAI;AASjB,cAAc,GAA2B;IACrC,EAAE,CAAC,YAAY,CAAC,GAAG,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC;IACvC,eAAe,IAAa;QACxB,MAAM,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;YAChB,KAAK,EAAE,CAAC,UAAU,CAAC,qBAAqB;gBAC5B,IAAA,wBAAQ,CAAsC;gBACtD,EAAE,CAAC,CAAC,QAAQ,KAAK,EAAE,CAAC,UAAU,CAAC,aAAa,IAAI,QAAQ,KAAK,EAAE,CAAC,UAAU,CAAC,eAAe,CAAC,CAAC,CAAC;oBACzF,KAAK,CAAC,IAAgC,CAAC,CAAC;gBAC5C,CAAC;gBACD,KAAK,CAAC;YAEV,KAAK,EAAE,CAAC,UAAU,CAAC,sBAAsB;gBACrC,KAAK,CAAC,IAAiC,CAAC,CAAC;gBACzC,KAAK,CAAC;QACd,CAAC;IACL,CAAC;IAED,eAAe,IAAwB;QACnC,EAAE,CAAC,CAAC,CAAC,iBAAiB,CAAC,IAAI,CAAC,MAAO,CAAC,CAAC,CAAC,CAAC;YACnC,GAAG,CAAC,gBAAgB,CAAC,IAAI,EAAE,IAAI,CAAC,sBAAsB,CAAC,CAAC;QAC5D,CAAC;IACL,CAAC;AACL,CAAC;AAED,2BAA2B,IAAa;IACpC,MAAM,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QAChB,qBAAqB;QACrB,KAAK,EAAE,CAAC,UAAU,CAAC,mBAAmB;YAClC,MAAM,CAAC,IAAI,CAAC;QAEhB,qCAAqC;QACrC,KAAK,EAAE,CAAC,UAAU,CAAC,YAAY;YAC3B,MAAM,CAAC,IAAI,CAAC;QAEhB,6FAA6F;QAC7F,KAAK,EAAE,CAAC,UAAU,CAAC,gBAAgB;YAC/B,MAAM,CAAE,IAA4B,CAAC,aAAa,CAAC,IAAI,KAAK,EAAE,CAAC,UAAU,CAAC,UAAU;gBAChF,IAAI,CAAC,MAAO,CAAC,IAAI,KAAK,EAAE,CAAC,UAAU,CAAC,YAAY,CAAC;QAEzD;YACI,MAAM,CAAC,KAAK,CAAC;IACrB,CAAC;AACL,CAAC","file":"noIncrementDecrementRule.js","sourcesContent":["import * as Lint from \"tslint/lib\";\r\nimport * as ts from \"typescript\";\r\n\r\nexport class Rule extends Lint.Rules.AbstractRule {\r\n    public static POSTFIX_FAILURE_STRING = \"Don't use '++' or '--' postfix operators outside statements or for loops.\";\r\n    public static PREFIX_FAILURE_STRING = \"Don't use '++' or '--' prefix operators.\";\r\n\r\n    public apply(sourceFile: ts.SourceFile): Lint.RuleFailure[] {\r\n        return this.applyWithFunction(sourceFile, walk);\r\n    }\r\n}\r\n\r\nfunction walk(ctx: Lint.WalkContext<void>): void {\r\n    ts.forEachChild(ctx.sourceFile, recur);\r\n    function recur(node: ts.Node): void {\r\n        switch (node.kind) {\r\n            case ts.SyntaxKind.PrefixUnaryExpression:\r\n                const { operator } = node as ts.PrefixUnaryExpression;\r\n                if (operator === ts.SyntaxKind.PlusPlusToken || operator === ts.SyntaxKind.MinusMinusToken) {\r\n                    check(node as ts.PrefixUnaryExpression);\r\n                }\r\n                break;\r\n\r\n            case ts.SyntaxKind.PostfixUnaryExpression:\r\n                check(node as ts.PostfixUnaryExpression);\r\n                break;\r\n        }\r\n    }\r\n\r\n    function check(node: ts.UnaryExpression): void {\r\n        if (!isAllowedLocation(node.parent!)) {\r\n            ctx.addFailureAtNode(node, Rule.POSTFIX_FAILURE_STRING);\r\n        }\r\n    }\r\n}\r\n\r\nfunction isAllowedLocation(node: ts.Node): boolean {\r\n    switch (node.kind) {\r\n        // Can be a statement\r\n        case ts.SyntaxKind.ExpressionStatement:\r\n            return true;\r\n\r\n        // Can be directly in a for-statement\r\n        case ts.SyntaxKind.ForStatement:\r\n            return true;\r\n\r\n        // Can be in a comma operator in a for statement (`for (let a = 0, b = 10; a < b; a++, b--)`)\r\n        case ts.SyntaxKind.BinaryExpression:\r\n            return (node as ts.BinaryExpression).operatorToken.kind === ts.SyntaxKind.CommaToken &&\r\n                node.parent!.kind === ts.SyntaxKind.ForStatement;\r\n\r\n        default:\r\n            return false;\r\n    }\r\n}\r\n"]}